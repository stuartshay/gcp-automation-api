name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master, develop]

env:
  GO_VERSION: "1.24.7"
  DOCKER_REGISTRY: us-central1-docker.pkg.dev
  GCP_PROJECT_ID: gcp-auto-api-250913
  ARTIFACT_REGISTRY_REPO: gcp-automation-api
  IMAGE_NAME: gcp-automation-api
  CLOUD_RUN_SERVICE: gcp-automation-api
  CLOUD_RUN_REGION: us-central1

jobs:
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    env:
      # Disable GCP metadata service access during linting
      GOOGLE_APPLICATION_CREDENTIALS: ""
      GCP_PROJECT_ID: "mock-project"
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Install gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@v2.22.8
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run golangci-lint
        run: golangci-lint run --timeout=5m

      - name: Run gosec security scan
        run: gosec -quiet ./...

      - name: Check Go formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted properly:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.24.7"]
    env:
      # Disable GCP metadata service access during tests
      GOOGLE_APPLICATION_CREDENTIALS: ""
      GCP_PROJECT_ID: "mock-project"
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: |
          # Skip tests that require GCP authentication in CI environment
          # Only run tests that don't require real GCP services
          echo "Skipping tests that require GCP authentication in CI environment"
          echo "Tests are temporarily disabled due to GCP authentication requirements"
          echo "TODO: Re-enable tests with proper mocking in future milestone"
          # go test -v -race ./...
          # go test -v -race -coverprofile=coverage.out $(go list ./... | grep -v '/tests$' | grep -v '/tests/' | grep -v '/mocks$')

      # - name: Generate coverage report
      #   run: go tool cover -html=coverage.out -o coverage.html

      # - name: Upload coverage to Codecov
      #   if: matrix.go-version == '1.24.7'
      #   uses: codecov/codecov-action@v5
      #   with:
      #     file: ./coverage.out
      #     flags: unittests
      #     name: codecov-umbrella

      # - name: Upload coverage artifacts
      #   if: matrix.go-version == '1.24.7'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: coverage-report
      #     path: |
      #       coverage.out
      #       coverage.html

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    env:
      # Disable GCP metadata service access during build
      GOOGLE_APPLICATION_CREDENTIALS: ""
      GCP_PROJECT_ID: "mock-project"
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        run: |
          mkdir -p bin
          go build -v -o bin/server cmd/server/main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gcp-automation-api-binary
          path: bin/server

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud as credential helper
        run: gcloud auth configure-docker ${{ env.DOCKER_REGISTRY }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    environment: copilot
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.CLOUD_RUN_SERVICE }} \
            --image=${{ env.DOCKER_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:latest \
            --platform=managed \
            --region=${{ env.CLOUD_RUN_REGION }} \
            --allow-unauthenticated \
            --port=8080 \
            --set-env-vars="ENVIRONMENT=production,LOG_LEVEL=info,GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" \
            --memory=1Gi \
            --cpu=1 \
            --max-instances=10 \
            --min-instances=0 \
            --project=${{ env.GCP_PROJECT_ID }}

      - name: Get service URL
        id: url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.CLOUD_RUN_SERVICE }} \
            --region=${{ env.CLOUD_RUN_REGION }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --format='value(status.url)')
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Service deployed to: $SERVICE_URL"

      - name: Verify deployment
        run: |
          echo "Testing health endpoint..."
          curl -f ${{ steps.url.outputs.service_url }}/health
          echo "Testing API endpoints..."
          curl -f ${{ steps.url.outputs.service_url }}/swagger/index.html

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
